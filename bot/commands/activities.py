"""Activity-related commands."""

import discord
from discord import app_commands

from bot.core.database import get_today_date
from bot.data import get_activity_by_id, get_all_activities
from bot.utils.embeds import create_activities_embed
from bot.utils.helpers import calculate_bp, is_event_active


def setup_activity_commands(tree, db, config):
    """Setup activity-related commands."""

    @tree.command(
        name="activities", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å"
    )
    async def activities_command(interaction: discord.Interaction):
        embed = create_activities_embed(db, interaction.user.id)
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @tree.command(name="complete", description="–û—Ç–º–µ—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é")
    @app_commands.describe(activity="–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
    async def complete_command(interaction: discord.Interaction, activity: str):
        activity_data = get_activity_by_id(activity)
        if not activity_data:
            await interaction.response.send_message(
                "‚ùå –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", ephemeral=True
            )
            return

        today = get_today_date()

        # Check if already completed
        if db.get_activity_status(interaction.user.id, activity, today):
            await interaction.response.send_message(
                f'‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å "{activity_data["name"]}" —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è!',
                ephemeral=True,
            )
            return

        # Mark as completed
        db.set_activity_status(interaction.user.id, activity, today, True)

        # Calculate and add BP
        vip_status = db.get_user_vip_status(interaction.user.id)
        points = calculate_bp(activity_data, vip_status, db)
        new_balance = db.add_user_bp(interaction.user.id, points)

        event_note = " üéâ" if is_event_active(db) else ""

        await interaction.response.send_message(
            f'‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å "{activity_data["name"]}" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!\n'
            f"**+{points} BP{event_note}**\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **{new_balance} BP**",
            ephemeral=True,
        )

    @complete_command.autocomplete("activity")
    async def complete_autocomplete(interaction: discord.Interaction, current: str):
        """Show only UNCOMPLETED activities"""
        today = get_today_date()
        completed_activities = db.get_user_completed_activities(
            interaction.user.id, today
        )
        all_activities = get_all_activities()

        choices = []
        for activity in all_activities:
            # Only show activities that are NOT completed
            if activity["id"] not in completed_activities:
                if (
                    current.lower() in activity["name"].lower()
                    or current.lower() in activity["id"].lower()
                ):
                    # Add checkmark to show status visually
                    choices.append(
                        app_commands.Choice(
                            name=f"{activity['name']} ({activity['bp']}/{activity['bp_vip']} BP)",
                            value=activity["id"],
                        )
                    )
        return choices[:25]

    @tree.command(
        name="uncomplete", description="–û—Ç–º–µ—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"
    )
    @app_commands.describe(activity="–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
    async def uncomplete_command(interaction: discord.Interaction, activity: str):
        activity_data = get_activity_by_id(activity)
        if not activity_data:
            await interaction.response.send_message(
                "‚ùå –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", ephemeral=True
            )
            return

        today = get_today_date()

        # Check if it was completed
        if not db.get_activity_status(interaction.user.id, activity, today):
            await interaction.response.send_message(
                f'‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å "{activity_data["name"]}" –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!',
                ephemeral=True,
            )
            return

        # Mark as not completed
        db.set_activity_status(interaction.user.id, activity, today, False)

        # Subtract BP
        vip_status = db.get_user_vip_status(interaction.user.id)
        points = calculate_bp(activity_data, vip_status, db)
        new_balance = db.subtract_user_bp(interaction.user.id, points)

        await interaction.response.send_message(
            f'‚ùå –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å "{activity_data["name"]}" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.\n'
            f"**-{points} BP**\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **{new_balance} BP**",
            ephemeral=True,
        )

    @uncomplete_command.autocomplete("activity")
    async def uncomplete_autocomplete(interaction: discord.Interaction, current: str):
        """Show only COMPLETED activities"""
        today = get_today_date()
        completed_activities = db.get_user_completed_activities(
            interaction.user.id, today
        )
        all_activities = get_all_activities()

        choices = []
        for activity in all_activities:
            # Only show activities that ARE completed
            if activity["id"] in completed_activities:
                if (
                    current.lower() in activity["name"].lower()
                    or current.lower() in activity["id"].lower()
                ):
                    # Add checkmark to show status visually
                    choices.append(
                        app_commands.Choice(
                            name=f"{activity['name']} ({activity['bp']}/{activity['bp_vip']} BP)",
                            value=activity["id"],
                        )
                    )
        return choices[:25]
