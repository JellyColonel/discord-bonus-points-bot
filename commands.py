import discord
from discord import app_commands

import config
from activities import get_activity_by_id, get_all_activities
from database import get_today_date
from utils import calculate_bp, create_activities_embed, is_event_active


class BonusCommands(app_commands.Group):
    def __init__(self, db):
        super().__init__()
        self.db = db


def has_admin_role(interaction: discord.Interaction) -> bool:
    """Check if user has admin role"""
    # First check for administrator permission
    if interaction.user.guild_permissions.administrator:
        return True

    # Then check for admin role if configured with a valid ID
    if config.ADMIN_ROLE_ID and config.ADMIN_ROLE_ID.isdigit():
        admin_role = discord.utils.get(
            interaction.user.roles, id=int(config.ADMIN_ROLE_ID)
        )
        return admin_role is not None

    return False


def setup_commands(tree, db):
    """Setup all bot commands"""

    @tree.command(name="commands", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥")
    async def commands_command(interaction: discord.Interaction):
        embed = discord.Embed(
            title="üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
            description="–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞",
            color=discord.Color.blue(),
        )

        # User commands - Activities
        activities_cmds = (
            "**`/activities`** - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å\n"
            "**`/complete [–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å]`** - –û—Ç–º–µ—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é (–¥–æ–±–∞–≤–ª—è–µ—Ç BP)\n"
            "**`/uncomplete [–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å]`** - –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤—ã—á–∏—Ç–∞–µ—Ç BP)\n"
        )
        embed.add_field(name="üìã –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", value=activities_cmds, inline=False)

        # User commands - Balance
        balance_cmds = (
            "**`/balance`** - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å BP\n"
            "**`/setbalance [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]`** - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å BP\n"
            "**`/total`** - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –¥–µ–Ω—å –∏ –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å\n"
        )
        embed.add_field(name="üí∞ –ë–∞–ª–∞–Ω—Å", value=balance_cmds, inline=False)

        # User commands - Settings
        settings_cmds = (
            "**`/setvip [true/false]`** - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å VIP —Å—Ç–∞—Ç—É—Å\n"
            "**`/eventstatus`** - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è x2 BP\n"
        )
        embed.add_field(name="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", value=settings_cmds, inline=False)

        # Admin commands
        if has_admin_role(interaction):
            admin_cmds = (
                "**`/toggleevent [true/false]`** - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ x2 BP\n"
            )
            embed.add_field(
                name="üëë –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", value=admin_cmds, inline=False
            )

        # Additional info
        embed.add_field(
            name="‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            value=(
                "‚Ä¢ VIP —Å—Ç–∞—Ç—É—Å —É–¥–≤–∞–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
                "‚Ä¢ –°–æ–±—ã—Ç–∏–µ x2 BP —É–¥–≤–∞–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã\n"
                "‚Ä¢ VIP + –°–æ–±—ã—Ç–∏–µ = 4x –±–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞\n"
                "‚Ä¢ –ë–∞–ª–∞–Ω—Å BP —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –¥–Ω—è–º–∏\n"
                "‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –≤ 07:00 –ø–æ –ú–°–ö"
            ),
            inline=False,
        )

        embed.set_footer(
            text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ /complete –∏ /uncomplete"
        )

        await interaction.response.send_message(embed=embed, ephemeral=True)

    @tree.command(
        name="activities", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å"
    )
    async def activities_command(interaction: discord.Interaction):
        embed = create_activities_embed(db, interaction.user.id)
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @tree.command(name="complete", description="–û—Ç–º–µ—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é")
    @app_commands.describe(activity="–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
    async def complete_command(interaction: discord.Interaction, activity: str):
        activity_data = get_activity_by_id(activity)
        if not activity_data:
            await interaction.response.send_message(
                "‚ùå –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", ephemeral=True
            )
            return

        today = get_today_date()

        # Check if already completed
        if db.get_activity_status(interaction.user.id, activity, today):
            await interaction.response.send_message(
                f'‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å "{activity_data["name"]}" —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è!',
                ephemeral=True,
            )
            return

        # Mark as completed
        db.set_activity_status(interaction.user.id, activity, today, True)

        # Calculate and add BP
        vip_status = db.get_user_vip_status(interaction.user.id)
        points = calculate_bp(activity_data, vip_status, db)
        new_balance = db.add_user_bp(interaction.user.id, points)

        event_note = " üéâ" if is_event_active(db) else ""

        await interaction.response.send_message(
            f'‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å "{activity_data["name"]}" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!\n'
            f"**+{points} BP{event_note}**\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **{new_balance} BP**",
            ephemeral=True,
        )

    @complete_command.autocomplete("activity")
    async def complete_autocomplete(interaction: discord.Interaction, current: str):
        """Show only UNCOMPLETED activities"""
        today = get_today_date()
        completed_activities = db.get_user_completed_activities(
            interaction.user.id, today
        )
        all_activities = get_all_activities()

        choices = []
        for activity in all_activities:
            # Only show activities that are NOT completed
            if activity["id"] not in completed_activities:
                if (
                    current.lower() in activity["name"].lower()
                    or current.lower() in activity["id"].lower()
                ):
                    # Add checkmark to show status visually
                    choices.append(
                        app_commands.Choice(
                            name=f"{activity['name']} ({activity['bp']}/{activity['bp_vip']} BP)",
                            value=activity["id"],
                        )
                    )
        return choices[:25]

    @tree.command(
        name="uncomplete", description="–û—Ç–º–µ—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"
    )
    @app_commands.describe(activity="–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
    async def uncomplete_command(interaction: discord.Interaction, activity: str):
        activity_data = get_activity_by_id(activity)
        if not activity_data:
            await interaction.response.send_message(
                "‚ùå –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", ephemeral=True
            )
            return

        today = get_today_date()

        # Check if it was completed
        if not db.get_activity_status(interaction.user.id, activity, today):
            await interaction.response.send_message(
                f'‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å "{activity_data["name"]}" –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!',
                ephemeral=True,
            )
            return

        # Mark as not completed
        db.set_activity_status(interaction.user.id, activity, today, False)

        # Subtract BP
        vip_status = db.get_user_vip_status(interaction.user.id)
        points = calculate_bp(activity_data, vip_status, db)
        new_balance = db.subtract_user_bp(interaction.user.id, points)

        await interaction.response.send_message(
            f'‚ùå –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å "{activity_data["name"]}" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.\n'
            f"**-{points} BP**\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **{new_balance} BP**",
            ephemeral=True,
        )

    @uncomplete_command.autocomplete("activity")
    async def uncomplete_autocomplete(interaction: discord.Interaction, current: str):
        """Show only COMPLETED activities"""
        today = get_today_date()
        completed_activities = db.get_user_completed_activities(
            interaction.user.id, today
        )
        all_activities = get_all_activities()

        choices = []
        for activity in all_activities:
            # Only show activities that ARE completed
            if activity["id"] in completed_activities:
                if (
                    current.lower() in activity["name"].lower()
                    or current.lower() in activity["id"].lower()
                ):
                    # Add checkmark to show status visually
                    choices.append(
                        app_commands.Choice(
                            name=f"{activity['name']} ({activity['bp']}/{activity['bp_vip']} BP)",
                            value=activity["id"],
                        )
                    )
        return choices[:25]

    @tree.command(name="setvip", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VIP —Å—Ç–∞—Ç—É—Å")
    @app_commands.describe(status="VIP —Å—Ç–∞—Ç—É—Å (true/false)")
    async def setvip_command(interaction: discord.Interaction, status: bool):
        db.set_user_vip_status(interaction.user.id, status)
        await interaction.response.send_message(
            f"VIP —Å—Ç–∞—Ç—É—Å {'‚úÖ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' if status else '‚ùå –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}",
            ephemeral=True,
        )

    @tree.command(name="balance", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å BP")
    async def balance_command(interaction: discord.Interaction):
        balance = db.get_user_bp_balance(interaction.user.id)
        vip_status = db.get_user_vip_status(interaction.user.id)

        embed = discord.Embed(
            title="üí∞ –ë–∞–ª–∞–Ω—Å –ë–æ–Ω—É—Å–Ω—ã—Ö –û—á–∫–æ–≤",
            description=f"**{balance} BP**",
            color=discord.Color.gold() if vip_status else discord.Color.green(),
        )

        embed.add_field(
            name="VIP –°—Ç–∞—Ç—É—Å",
            value="‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if vip_status else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω",
            inline=True,
        )

        if is_event_active(db):
            embed.add_field(name="–°–æ–±—ã—Ç–∏–µ", value="üéâ x2 BP –∞–∫—Ç–∏–≤–Ω–æ!", inline=True)

        embed.set_footer(text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥")

        await interaction.response.send_message(embed=embed, ephemeral=True)

    @tree.command(name="setbalance", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å BP")
    @app_commands.describe(amount="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ BP")
    async def setbalance_command(interaction: discord.Interaction, amount: int):
        if amount < 0:
            await interaction.response.send_message(
                "‚ùå –ë–∞–ª–∞–Ω—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!",
                ephemeral=True,
            )
            return

        db.set_user_bp_balance(interaction.user.id, amount)

        await interaction.response.send_message(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: **{amount} BP**",
            ephemeral=True,
        )

    @tree.command(
        name="total", description="–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö BP –∑–∞ –¥–µ–Ω—å"
    )
    async def total_command(interaction: discord.Interaction):
        vip_status = db.get_user_vip_status(interaction.user.id)
        today = get_today_date()
        completed_activities = db.get_user_completed_activities(
            interaction.user.id, today
        )

        total_bp = 0
        all_activities = get_all_activities()

        for activity_id in completed_activities:
            activity = get_activity_by_id(activity_id)
            if activity:
                points = calculate_bp(activity, vip_status, db)
                total_bp += points

        balance = db.get_user_bp_balance(interaction.user.id)
        event_status = "\nüéâ **–°–æ–±—ã—Ç–∏–µ x2 –∞–∫—Ç–∏–≤–Ω–æ!**" if is_event_active(db) else ""

        embed = discord.Embed(
            title="üí∞ –ò—Ç–æ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
            description=f"**–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {total_bp} BP**\n"
            f"**–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} BP**\n\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {len(completed_activities)}/{len(all_activities)}\n"
            f"VIP —Å—Ç–∞—Ç—É—Å: {'‚úÖ' if vip_status else '‚ùå'}{event_status}",
            color=discord.Color.gold()
            if is_event_active(db)
            else discord.Color.green(),
        )

        embed.set_footer(text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥")

        await interaction.response.send_message(embed=embed, ephemeral=True)

    @tree.command(
        name="toggleevent", description="[ADMIN] –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ x2 BP"
    )
    @app_commands.describe(enabled="–í–∫–ª—é—á–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ (true/false)")
    async def toggleevent_command(interaction: discord.Interaction, enabled: bool):
        # Check admin permissions
        if not has_admin_role(interaction):
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", ephemeral=True
            )
            return

        # Toggle event
        db.set_setting("double_bp_event", str(enabled))

        embed = discord.Embed(
            title="üéâ –°–æ–±—ã—Ç–∏–µ x2 BP" if enabled else "‚öôÔ∏è –°–æ–±—ã—Ç–∏–µ x2 BP",
            description=f"–°–æ–±—ã—Ç–∏–µ x2 BP {'**–ê–ö–¢–ò–í–ò–†–û–í–ê–ù–û**' if enabled else '**–î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù–û**'}!\n\n"
            f"–í—Å–µ –±–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏ —Ç–µ–ø–µ—Ä—å —É–º–Ω–æ–∂–∞—é—Ç—Å—è –Ω–∞ {'**2**' if enabled else '**1**'}.",
            color=discord.Color.gold() if enabled else discord.Color.blue(),
        )

        embed.add_field(
            name="–ò–∑–º–µ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            value=f"{interaction.user.mention}",
            inline=False,
        )

        await interaction.response.send_message(embed=embed)

    @tree.command(name="eventstatus", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è x2 BP")
    async def eventstatus_command(interaction: discord.Interaction):
        event_active = is_event_active(db)

        embed = discord.Embed(
            title="üéâ –°—Ç–∞—Ç—É—Å –°–æ–±—ã—Ç–∏—è x2 BP"
            if event_active
            else "‚öôÔ∏è –°—Ç–∞—Ç—É—Å –°–æ–±—ã—Ç–∏—è x2 BP",
            description=f"–°–æ–±—ã—Ç–∏–µ x2 BP: {'**–ê–ö–¢–ò–í–ù–û** üéâ' if event_active else '**–ù–ï–ê–ö–¢–ò–í–ù–û**'}",
            color=discord.Color.gold() if event_active else discord.Color.blue(),
        )

        if event_active:
            embed.add_field(
                name="–ú–Ω–æ–∂–∏—Ç–µ–ª—å BP",
                value="–í—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–∞—é—Ç **–≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ** –±–æ–Ω—É—Å–Ω—ã—Ö –æ—á–∫–æ–≤!",
                inline=False,
            )

        embed.set_footer(text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥")

        await interaction.response.send_message(embed=embed, ephemeral=True)
